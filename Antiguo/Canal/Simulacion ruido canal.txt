from numpy import sum,isrealobj,sqrt
from numpy.random import standard_normal

def awgn(s,SNRdB,L=1):
"""
     canal AWGN
     Agregue ruido AWGN a la señal de entrada. La función agrega el vector de ruido AWGN a la señal 's' para generar un vector de señal resultante 'r' de SNR especificada en dB. También
     devuelve el vector de ruido 'n' que se suma a la señal 's' y la densidad espectral de potencia N0 del ruido agregado
     Parámetros:
         s: vector de señal de entrada/transmitida
         SNRdB: relación señal-ruido deseada (expresada en dB) para la señal recibida
         L: factor de sobremuestreo (aplicable para simulación de forma de onda) predeterminado L = 1.
     Devoluciones:
         r : vector de señal recibida (r=s+n)
"""
    gamma = 10**(SNRdB/10) #SNR a escala lineal
    if s.ndim==1:# si s es un vector unidimensional
        P=L*sum(abs(s)**2)/len(s) #Potencia real en el vector
    else: # señales multidimensionales como MFSK
        P=L*sum(sum(abs(s)**2))/len(s) # si s es una matriz [MxN]
    N0=P/gamma # Encuentra la densidad espectral del ruido.
    if isrealobj(s):# comprobar si la entrada es un tipo de objeto real/complejo
        n = sqrt(N0/2)*standard_normal(s.shape) # ruido calculado
    else:
        n = sqrt(N0/2)*(standard_normal(s.shape)+1j*standard_normal(s.shape))
    r = s + n # señal recibida
    return r
